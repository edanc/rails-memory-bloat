#!/usr/bin/env ruby
require 'optparse'
require 'report_generator/process_view'
require 'report_generator/resource'
require 'report_generator/rails_process'
require 'report_generator/request'

log = nil
output = './output'
options = OptionParser.new do |opts|
  opts.on('-o DIR', 'Output files to DIR') do |dir|
    output = dir
  end
end.tap(&:parse!)

log = ARGV.shift or (warn(options.help) || exit(1))
assests_path = File.join(Gem.loaded_specs['rails_memory_bloat'].full_gem_path, "/lib/report_generator/assets")
system('mkdir', '-p', "#{output}/data")
system('cp', '-r', assests_path, "#{output}/assets")

File.open(log,'r').grep(/Memory Usage/).each do |line|
  ReportGenerator::Request.new(line)
end

ReportGenerator::RailsProcess.instances.each do |process|
  File.open("#{output}/#{process.csv_path}", 'w') do |csv|
    process.requests.each_with_index do |r|
      csv.puts("#{r.rss}")
    end
  end
end

IO.popen('gnuplot', 'w') do |gp|
  gp.puts('set term pngcairo size 640,480')
  gp.puts('set grid')
  gp.puts('set datafile separator ","')
 ReportGenerator::RailsProcess.instances.each do |process|
    gp.puts(%(set output "#{output}/#{process.png_path}"))
    gp.puts("set title 'PID #{process.pid}'")
    gp.puts('set xlabel "Request #"')
    gp.puts('set ylabel "Memory (MB)"')
    gp.puts('set yrange [0:800]')
    gp.puts(%(plot "#{output}/#{process.csv_path}" using 0:($1/1024) with lines notitle))
  end
  gp.puts('quit')
  gp.close
end

File.open("#{output}/index.html", 'w') do |f|
  f.write(ReportGenerator::ProcessView.new(ReportGenerator::RailsProcess.instances).to_html)
end
